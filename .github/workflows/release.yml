name: Pipeline CI - Dataloom

on:
  workflow_dispatch:

jobs:
  # verify-if-pull-request-is-approved:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Verify if the pull request is approved
  #     if: |
  #       (github.event_name == 'pull_request_review' && github.event.review.state == 'approved') || 
  #       (github.event_name == 'pull_request' && github.event.pull_request.merged == true) ||
  #       (github.event_name == 'workflow_dispatch')
  #     run: |
  #       echo "Pull Request aprovado."

  # verify-if-pull-request-is-from-development-branch:
  #   needs: verify-if-pull-request-is-approved
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - name: Verify if the pull request is sent by the development branch
  #     if: github.event_name == 'pull_request'
  #     run: |
  #       if [[ ${{ github.event.pull_request.head.ref }} == "develop" ]]; then
  #         echo "Este PR vem da branch develop."
  #       else
  #         echo "Este PR n√£o vem da branch develop."
  #         exit 1
  #       fi

  verify-lint-with-flake8:
    # needs: verify-if-pull-request-is-from-development-branch
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4.1.0
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip --disable-pip-version-check install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi


    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  unit-tests:
    # needs: verify-if-pull-request-is-from-development-branch
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src/data_pipeline
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Poetry
      run: curl -sSL https://install.python-poetry.org | python3 -

    - name: Install dependencies
      run: poetry install

    - name: Run tests
      run: poetry run pytest

    - name: Run tests with coverage
      run: poetry run pytest --cov=core --cov-report=html

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: ./src/data_pipeline/htmlcov/